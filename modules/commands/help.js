module.exports.config = {
    name: "help",
    version: "1.0.0",
    hasPermssion: 0,
    credits: "Mirai Team",
    description: "H∆∞·ªõng d·∫´n cho ng∆∞·ªùi m·ªõi",
    commandCategory: "ti·ªán √≠ch",
    usages: "[T√™n module]",
    cooldowns: 5,
    envConfig: {
        autoUnsend: true,
        delayUnsend: 60
    }
};

module.exports.run = function({ api, event, args }) {
    try {
    const { commands } = global.client;
    const { threadID, messageID } = event;
    const command = commands.get((args[0] || "").toLowerCase());
    const threadSetting = global.data.threadData.get(parseInt(threadID)) || {};
    const { autoUnsend, delayUnsend } = global.configModule[this.config.name];
    const prefix = (threadSetting.hasOwnProperty("PREFIX")) ? threadSetting.PREFIX : global.config.PREFIX;

    if (args[0] == "all") {
        const command = commands.values();
        var group = [], msg = "";
        for (const commandConfig of command) {
            if (!group.some(item => item.group.toLowerCase() == commandConfig.config.commandCategory.toLowerCase())) group.push({ group: commandConfig.config.commandCategory.toLowerCase(), cmds: [commandConfig.config.name] });
            else group.find(item => item.group.toLowerCase() == commandConfig.config.commandCategory.toLowerCase()).cmds.push(commandConfig.config.name);
        }
        group.forEach(commandGroup => msg += `‚Üí ${commandGroup.group.charAt(0).toUpperCase() + commandGroup.group.slice(1)}\n${commandGroup.cmds.join(', ')}\n\n`);
        return api.sendMessage(`===== DANH S√ÅCH L·ªÜNH =====\n` + msg + `‚Üí S·ªë l·ªánh hi·ªán c√≥: ${commands.size}\n‚Üí HDSD: ${prefix}help [text]\n‚ò†NGHI√äM C·∫§M S·ª¨ D·ª§NG L·ªÜNH THU·ªòC PH·∫¶N ADMIN‚ò†\n‚Üí Khi b·∫°n th·∫£ c·∫£m x√∫c üò† tin nh·∫Øn bot s·∫Ω t·ª± thu h·ªìi! `, threadID, async (error, info) =>{
            if (autoUnsend) {
                await new Promise(resolve => setTimeout(resolve, delayUnsend * 1000));
                return api.unsendMessage(info.messageID);
            } else return;
        });
    }
if (!command) {
    const commandsPush = [];
    const page = parseInt(args[0]) || 1;
    const pageView = 20;
    let i = 0;
    let msg = "===== DANH S√ÅCH L·ªÜNH =====\n";

    for (var [name, value] of (commands)) {
        name += `
‚Üí ${value.config.description}
‚Üí Th·ªùi gian ch·ªù: ${value.config.cooldowns}s
‚Üí Quy·ªÅn h·∫°n: ${((value.config.hasPermssion == 0) ? `Ng∆∞·ªùi d√πng` : (value.config.hasPermssion == 1) ? `Qu·∫£n tr·ªã vi√™n nh√≥m` : `ADMIN BOT`)}\n`;
        commandsPush.push(name);
    }

    commandsPush.sort((a, b) => a.data - b.data);

    const first = pageView * page - pageView;
    i = first;
    const helpView = commandsPush.slice(first, first + pageView);

    for (let cmds of helpView)
        msg += `„Äé${++i}„Äè - ${cmds}\n`;
    const cmdsView = `
‚Üí Trang ${page}/${Math.ceil(commandsPush.length/pageView)}
‚Üí Hi·ªán t·∫°i c√≥ ${commandsPush.length} l·ªánh c√≥ th·ªÉ s·ª≠ d·ª•ng
‚Üí HDSD: ${prefix}help <S·ªë trang/all>`;
    return api.sendMessage(msg + cmdsView, threadID,
        async (error, info) => {
            if(error) return console.log(error)
            if (autoUnsend) {
                await new Promise(resolve =>
                    setTimeout(resolve, delayUnsend * 1000));
                return api.unsendMessage(info.messageID);
            } else return;
        });
}
return api.sendMessage(`
‚Üí L·ªánh: ${command.config.name}
‚Üí Th·ª±c thi: ${command.config.description}
‚Üí C√°ch s·ª≠ d·ª•ng: ${prefix}${command.config.name} ${(command.config.usages) ? command.config.usages : "Ch∆∞a c√≥ h∆∞·ªõng d·∫´n c·ª• th·ªÉ"}
‚Üí Th·ªùi gian ch·ªù: ${command.config.cooldowns}
‚Üí Quy·ªÅn h·∫°n: ${((command.config.hasPermssion == 0) ? `Ng∆∞·ªùi d√πng` : (command.config.hasPermssion == 1) ? `Qu·∫£n tr·ªã vi√™n nh√≥m` : `ADMIN BOT`)}`, threadID, messageID);
} catch(e) {
    console.log(e)
    }
};
